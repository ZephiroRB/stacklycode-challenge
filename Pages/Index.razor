@page "/"
@using System.Globalization
@inject HttpClient Http

<div class="content_wp">
    <div class="wrapper">
        <form class="form_search">
            <div>
                <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                    <path fill-rule="evenodd" d="M14 6V4h-4v2h4zM4 8v11h16V8H4zm16-2c1.11 0 2 .89 2 2v11c0 1.11-.89 2-2 2H4c-1.11 0-2-.89-2-2l.01-11c0-1.11.88-2 1.99-2h4V4c0-1.11.89-2 2-2h4c1.11 0 2 .89 2 2v2h4z"></path>
                </svg>
                <input name="description" id="description" type="text" placeholder="Title, companies, expertise or benefits" @bind="CurrentSearch">
            </div>
            <button @onclick:preventDefault @onclick=@(async () => await SearchData())>Search</button>
        </form>
    </div>
</div>



<div class="page_wp">
    <div class="filters_wp">
        <div class="filters_inner_wp">
            <div class="filter_option"><label for="fulltime">Full Time Only</label><input id="fulltime" type="checkbox" @bind-value="Fulltime" @bind-value:event="onchange"></div>
            <div class="filters_location">
                <h1>Location</h1>
                <div class="filters_location_search">
                    <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"></path>
                    </svg>
                    <input type="text" placeholder="City, state, zip code or country" @bind-value="City" @bind-value:event="oninput">
                </div>
            </div>
            <div class="filter_option"><label for="london">London</label><input id="london" type="checkbox" value="london"></div>
            <div class="filter_option"><label for="amsterdam">Amsterdam</label><input id="amsterdam" type="checkbox" value="amsterdam"></div>
            <div class="filter_option"><label for="new+york">New York</label><input id="new+york" type="checkbox" value="new+york" /> </div>
            <div class="filter_option"><label for="berlin">Berlin</label><input id="berlin" type="checkbox" value="berlin"  @onchange="eventArgs => { @CheckboxClicked("berlin", eventArgs.Value)}" ></div>
        </div>
    </div>



    <div class="results_wp">


        @Fulltime

        @if (githubResponses == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {


            @foreach (var githubResponse in githubResponses)
            {


                <div class="job_wp">
                    <div class="job_image"><a href="/details/@githubResponse.Id"><img src="@githubResponse.Company_Logo" alt="@githubResponse.Company"></a></div>
                    <div class="job_details">
                        <div class="wrapper">
                            <h1>@githubResponse.Company</h1>
                            <a href="/details/@githubResponse.Id">@githubResponse.Title</a><span>@githubResponse.Type</span>
                        </div>
                        <ul class="job_details_extras">
                            <li>
                                <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"></path>
                                </svg>
                                <span>@githubResponse.Location</span>
                            </li>
                            <li>
                                <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path>
                                    <path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path>
                                </svg>
                                <span>@GetPrettyDate(@githubResponse.Created_At)</span>
                            </li>
                        </ul>
                    </div>
                </div>


            }
        }


        <!--
        <div class="job_pagination">
            <div class="job_page_pagination">
                <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"></path>
                </svg>
            </div>
            <div class="job_page_pagination"><span>1</span></div>
            <div class="job_page_pagination"><span>2</span></div>
            <div class="job_page_pagination"><span>3</span></div>
            <div class="job_page_pagination"><span>4</span></div>
            <div class="job_page_pagination"><span>5</span></div>
            <div class="job_page_pagination"><span>6</span></div>
            <div class="job_page_pagination"><span>7</span></div>
            <div class="job_page_pagination"><span>8</span></div>
            <div class="job_page_pagination"><span>9</span></div>
            <div class="job_page_pagination active"><span>10</span></div>
            <div class="job_page_pagination disabled">
                <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"></path>
                </svg>
            </div>
        </div>-->
    </div>




</div>



@functions {

    public string City { get; set; }


    public bool Fulltime { get; set; }

    public List<string> SelectedValues { get; set; }


    protected override async Task OnInitializedAsync()
    {
        githubResponses = await Http.GetFromJsonAsync<GithubResponse[]>($"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page=1&search=java&location=");


    }


    private async Task SearchData()
    {
        string Fulltime2 = "false";

        if (@Fulltime)
        {
            Fulltime2 = "true";
        }

        if (@message.Count > 0)
        {
            string combindedString = string.Join(",", @message);

            githubResponses = await Http.GetFromJsonAsync<GithubResponse[]>($"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page=1&search={@CurrentSearch}&location={@combindedString}&full_time={Fulltime2}");

        }
        else
        {

            githubResponses = await Http.GetFromJsonAsync<GithubResponse[]>($"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page=1&search={@CurrentSearch}&location=&full_time={Fulltime2}");




        }

    }


    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }


    string GetPrettyDate(string DateString)
    {

        Console.WriteLine("iString -" + DateString.Replace(" UTC ", " ") + "-");

        DateTime dx = DateTime.ParseExact(DateString.Replace(" UTC ", " "), "ddd MMM dd HH:mm:ss yyyy", CultureInfo.InvariantCulture);


        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(dx);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
             dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
             Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }
}


}


@code {

    public GithubResponse[] githubResponses;

    public class GithubResponse
    {
        public string Id { get; set; }

        public string Title { get; set; }

        public string Type { get; set; }

        public string Company { get; set; }

        public string Company_Logo { get; set; }

        public string Created_At { get; set; }

        public string Location { get; set; }
    }


    private string CurrentSearch { get; set; }

    List<string> message = new List<string>();


    void SetFilters(string newMessage)
    {
        message.Add(newMessage);
    }




}
