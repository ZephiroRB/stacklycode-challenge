@page "/details/{uid}"
@using System.Globalization
@inject HttpClient Http

<div class="main">
    <div class="page_wp">

        @if (githubResponses == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {

            <div class="sidebar_wp">
                <a href="/">
                    <svg class="svg_icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M22 12l-4-4v3H3v2h15v3z"></path>
                    </svg>
                    <span>Back to search</span>
                </a>
                <div class="apply_wp">
                    <h1>How to apply</h1>
                    <p>
                    @((MarkupString)@githubResponses.How_To_Apply)
                    </p>
                </div>
            </div>
            <div class="job_page">
                <header class="job_page_header">
                    <div class="job_page_header_title">
                        <h1>@githubResponses.Title</h1>
                        <span>@githubResponses.Type</span>
                    </div>
                    <div class="job_page_header_ago_date">
                        <svg class="svg_icon sc-carGAA" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path>
                            <path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path>
                        </svg>
                        <span>@GetPrettyDate(githubResponses.Created_At)</span>
                    </div>
                    <div class="job_page_header_details">
                        <div class="job_page_header_details_image"><img src="@githubResponses.Company_Logo" alt="@githubResponses.Company"></div>
                        <div class="job_page_header_details_text">
                            <a target="_blank" rel="noopener noreferrer">@githubResponses.Company</a>
                            <div class="job_page_header_details_type">
                                <svg class="svg_icon sc-jcwofb" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"></path>
                                </svg>
                                <span>@githubResponses.Location</span>
                            </div>
                        </div>
                    </div>
                </header>
                <div class="job_page_body">

                @((MarkupString)@githubResponses.Description)
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public string Uid { get; set; }



    public GithubResponse githubResponses;


    protected override async Task OnInitializedAsync()
    {   
        githubResponses = await Http.GetFromJsonAsync<GithubResponse>($" https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions/{@Uid}.json");

       
    }


    public class GithubResponse
    {
        public string Id { get; set; }

        public string Title { get; set; }

        public string Type { get; set; }

        public string Company { get; set; }

        public string Company_Logo { get; set; }

        public string Created_At { get; set; }

        public string Location { get; set; }

        public string Description { get; set; }

        public string How_To_Apply { get; set; }
    }




    string GetPrettyDate(string DateString)
    {

        Console.WriteLine("iString -" + DateString.Replace(" UTC ", " ") + "-");

        DateTime dx = DateTime.ParseExact(DateString.Replace(" UTC ", " "), "ddd MMM dd HH:mm:ss yyyy", CultureInfo.InvariantCulture);


        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(dx);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
                dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
                Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }
    }



}
